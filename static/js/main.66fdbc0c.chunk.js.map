{"version":3,"sources":["data/data.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","services/validate.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["PostUrls","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","urlValidate","currentValue","currentName","Object","values","includes","test","errorMessage","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","titleValue","setTitleValue","descriptionValue","setDescriptionValue","imageUrlValue","setImageUrlValue","imbdbUrlValue","setImbdbUrlValue","imbdbIdValue","setImbdbIdValue","isDisabled","image","imdb","onSubmit","preventDefault","newValue","disabled","App","moviesFromServer","movieList","setMovieList","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"yNAAYA,E,wECQCC,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,0BFV/Bd,K,eAAAA,E,gBAAAA,M,KGGZ,IAAMe,EAAU,uKAEHC,EAAc,SAACC,EAAsBC,GAChD,OAAOC,OAAOC,OAAOpB,GAAUqB,SAASH,KAClCH,EAAQO,KAAKL,EACpB,ECWD,IAAIM,EAAe,GAENC,EAA6B,SAAC,GAOpC,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,MAKI,IAJJC,aAII,MAJIF,EAIJ,MAHJG,mBAGI,sBAHmBD,GAGnB,MAFJE,gBAEI,aADJC,gBACI,MADO,WAAQ,EACf,EAEJ,EAAaC,oBAAS,2BAASN,EAAT,YAhBfO,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAca,IAAfC,EAAP,oBAGA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACIC,EAAWF,GAAWR,EAU1B,OARKH,EAEMV,EAAYU,EAAOD,GAC5BF,EAAY,UAAMI,EAAN,2BAEZY,GAAW,EAJXhB,EAAY,UAAMI,EAAN,gBAQZ,sBAAKxB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQqC,QAASJ,EAAlC,SACGT,IAGH,qBAAKxB,UAAU,UAAf,SACE,uBACEsC,KAAK,OACLL,GAAIA,EACJ,0BAAkBX,GAClBtB,UAAWuC,IAAW,QAAS,CAC7B,YAAaH,IAEfX,YAAaA,EACbF,MAAOA,EACPI,SAAU,SAAAa,GAAK,OAAIb,EAASa,EAAMC,OAAOlB,MAA1B,EACfmB,OAAQ,kBAAMP,GAAW,EAAjB,MAIXC,GACC,mBAAGpC,UAAU,iBAAb,SAA+BoB,MAItC,EC5DYuB,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,EAA0BhB,mBAAS,GAAnC,mBAAOiB,EAAP,KAAcC,EAAd,KACA,EAAoClB,mBAAS,IAA7C,mBAAOmB,EAAP,KAAmBC,EAAnB,KACA,EAAgDpB,mBAAS,IAAzD,mBAAOqB,EAAP,KAAyBC,EAAzB,KACA,EAA0CtB,mBAAS,IAAnD,mBAAOuB,EAAP,KAAsBC,EAAtB,KACA,EAA0CxB,mBAAS,IAAnD,mBAAOyB,EAAP,KAAsBC,EAAtB,KACA,EAAwC1B,mBAAS,IAAjD,mBAAO2B,EAAP,KAAqBC,EAArB,KAqBMC,IACJV,GAAcI,GAAiBE,GAAiBE,IAC5C1C,EAAYsC,EAAetD,EAAS6D,SACpC7C,EAAYwC,EAAexD,EAAS8D,OAG1C,OACE,uBAAM3D,UAAU,WAAuB4D,SA1BpB,SAACpB,GACpBA,EAAMqB,iBAENjB,EAAM,CACJxC,MAAO2C,EACP1C,YAAa4C,EACb/C,OAAQiD,EACR5C,QAAS8C,EACT1C,OAAQ4C,IAGVP,EAAc,IACdE,EAAoB,IACpBE,EAAiB,IACjBE,EAAiB,IACjBE,EAAgB,IAChBV,EAASD,EAAQ,EAClB,EASC,UACE,oBAAI7C,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEsB,KAAK,QACLE,MAAM,QACND,MAAOwB,EACPrB,UAAQ,EACRC,SAAU,SAACmC,GAAD,OAAsBd,EAAcc,EAApC,IAGZ,cAAC,EAAD,CACExC,KAAK,cACLE,MAAM,cACND,MAAO0B,EACPtB,SAAU,SAACmC,GAAD,OAAsBZ,EAAoBY,EAA1C,IAGZ,cAAC,EAAD,CACExC,KAAK,SACLE,MAAM,YACND,MAAO4B,EACPxB,SAAU,SAACmC,GAAD,OAAsBV,EAAiBU,EAAvC,EACVpC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,UACLE,MAAM,WACND,MAAO8B,EACP1B,SAAU,SAACmC,GAAD,OAAsBR,EAAiBQ,EAAvC,EACVpC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,SACLE,MAAM,UACND,MAAOgC,EACP5B,SAAU,SAACmC,GAAD,OAAsBN,EAAgBM,EAAtC,EACVpC,UAAQ,IAGV,qBAAK1B,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEsC,KAAK,SACL,UAAQ,gBACRtC,UAAU,iBACV+D,SAAUN,EAJZ,uBA5C0BZ,EAwDnC,E,OC5FYmB,EAAM,WACjB,MAAkCpC,mBAAkBqC,GAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KAMA,OACE,sBAAKnE,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQyD,MAEtB,qBAAKlE,UAAU,UAAf,SACE,cAAC,EAAD,CAAU4C,MAVC,SAACwB,GAChBD,GAAa,SAAAE,GAAa,4BAAQA,GAAR,CAAuBD,GAAvB,GAC3B,QAYF,ECrBDE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.66fdbc0c.chunk.js","sourcesContent":["export enum PostUrls {\n  image = 'imgUrl',\n  imdb = 'imdbUrl',\n}\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { PostUrls } from '../data/data';\n\n/* eslint-disable-next-line */\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const urlValidate = (currentValue: string, currentName: string) => {\n  return Object.values(PostUrls).includes(currentName as PostUrls)\n    && !pattern.test(currentValue);\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { urlValidate } from '../../services/validate';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nlet errorMessage = '';\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  let hasError = touched && required;\n\n  if (!value) {\n    errorMessage = `${label} is required`;\n  } else if (urlValidate(value, name)) {\n    errorMessage = `${label} should have valid URLs`;\n  } else {\n    hasError = false;\n  }\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { urlValidate } from '../../services/validate';\nimport { PostUrls } from '../../data/data';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [titleValue, setTitleValue] = useState('');\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [imageUrlValue, setImageUrlValue] = useState('');\n  const [imbdbUrlValue, setImbdbUrlValue] = useState('');\n  const [imbdbIdValue, setImbdbIdValue] = useState('');\n\n  const handleSumbit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd({\n      title: titleValue,\n      description: descriptionValue,\n      imgUrl: imageUrlValue,\n      imdbUrl: imbdbUrlValue,\n      imdbId: imbdbIdValue,\n    });\n\n    setTitleValue('');\n    setDescriptionValue('');\n    setImageUrlValue('');\n    setImbdbUrlValue('');\n    setImbdbIdValue('');\n    setCount(count + 1);\n  };\n\n  const isDisabled = !(\n    titleValue && imageUrlValue && imbdbUrlValue && imbdbIdValue\n    && !urlValidate(imageUrlValue, PostUrls.image)\n    && !urlValidate(imbdbUrlValue, PostUrls.imdb)\n  );\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSumbit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={titleValue}\n        required\n        onChange={(newValue: string) => setTitleValue(newValue)}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={descriptionValue}\n        onChange={(newValue: string) => setDescriptionValue(newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imageUrlValue}\n        onChange={(newValue: string) => setImageUrlValue(newValue)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imbdbUrlValue}\n        onChange={(newValue: string) => setImbdbUrlValue(newValue)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imbdbIdValue}\n        onChange={(newValue: string) => setImbdbIdValue(newValue)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movieList, setMovieList] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovieList(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movieList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}